When an application component starts and the application does not have any other components running, the Android system starts a new Linux process for the application with a single thread of execution.|True|False 
When an application component starts even if there is another component running, the Android system starts a new Linux process for the application with a single thread of execution.|False|True 
By default, all components of the same application run in the same process and thread called the "main" thread.|True|False 
If an application component starts and there already exists a process for that application, because another component from the application exists, then the component is started within that process and uses the same thread of execution.|True|False
If an application component starts and there already exists a process for that application, the component is started with a different process.|True|False
If you find that you need to control which process a certain component belongs to, you can do so in the manifest file.|True|False
The Foreground Process is the most important process and is killed last.|True|False
The Foreground Process is the most important process and is killed (Second|First).|False|True
A process is considered to be in the foreground if (it hosts an Activity the user is interacting with, the Activity's onResume() method has been called.|it hosts a Service that's bound to the activity that the user is interacting with.|it hosts a Service that's running "in the foreground"â€”the service has called startForeground().|it hosts a Service that's executing one of its lifecycle callbacks. onCreate(), onStart(), or onDestroy().|it hosts a BroadcastReceiver that's executing its onReceive() method).|True|False
A visible Process is killed before a foreground process.|True|False
A visible Process is killed before a (Service|Background|Empty) process.|False|True
A Process is considered to be visible if (it hosts an Activity that is not in the foreground, but is still visible to the user,its onPause() method has been called. This might occur, for example, if the foreground activity started a dialog, which allows the previous activity to be seen behind it.
|it hosts a Service that's bound to a visible or foreground activity).|True|False
A Service process is a process running a service that has been started with the startService() method and does not fall into either of the two higher categories.|True|False
A Service Process is killed before a (Visible|Foreground) process.|True|False
A Service Process is killed before a (Background|Empty) process.|False|True
A Background Process is a process holding an activity that's not currently visible to the user the activity's onStop() method has been called.|True|False
A Background Process is killed before a (Foreground|Visible|Service) process.|True|False
A Background Process is killed before a (Empty) process.|False|True
An Empty Process is killed First.|True|False
An Empty Process is killed before a (Foreground|Visible|Service|Background) process.|False|True
An Empty process that doesn't hold any active application components.|True|False
Empty processes are kept for caching purposes, to improve startup time the next time a component needs to run in it.|True|False
If a process A is serving another process B, Process A is always considered at least as important as process B and no lower.|True|False
A process that is serving another process can never be ranked lower than the process it is serving.|True|False
Android supports Interprocessess Communication.|True|False
The main thread is also sometimes called the UI thread.|True|False
Andoid UI toolkit is not thread-safe.|True|False
Do not block the UI thread.|True|False
Do not access the Android UI toolkit from outside the UI thread.|True|False
It's ok to access the Android UI toolkit from outside the UI thread.|False|True
You can access the UI thread from other threads with Activity.runOnUiThread(Runnable).|True|False
You can access the UI thread from other threads with View.post(Runnable).|True|False
You can access the UI thread from other threads with View.postDelayed(Runnable, long).|True|False
There is no way to access the UI thread from other threads.|True|False
AsyncTask allows you to perform asynchronous work on your user interface. It performs the blocking operations in a worker thread and then publishes the results on the UI thread, without requiring you to handle threads and/or handlers yourself.|True|False
AsyncTask: The method doInBackground() executes automatically on a worker thread.|True|False
AsyncTask: onPreExecute(), onPostExecute(), and onProgressUpdate() are all invoked on the UI thread.|True|False
AsyncTask: The value returned by doInBackground() is sent to onPostExecute().|True|False
AsyncTask: You can call publishProgress() at anytime in doInBackground() to execute AsyncTask: onProgressUpdate() on the UI thread.|True|False
AsyncTask: You can cancel the task at any time, from any thread.|True|False
AsyncTask: onPreExecute(), onPostExecute(), and onProgressUpdate() are all invoked in a background thread.|False|True
AsyncTask: You can cancel the task at any time, from the UI thread.|False|True